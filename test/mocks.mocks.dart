// Mocks generated by Mockito 5.0.15 from annotations
// in film_freund/test/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:film_freund/managers/movies/movie_manager.dart' as _i6;
import 'package:film_freund/managers/user/user_manager.dart' as _i3;
import 'package:film_freund/services/auth/i_auth_service.dart' as _i5;
import 'package:film_freund/services/date_time/date_time_service.dart' as _i8;
import 'package:film_freund/services/local_settings/i_local_settings_database.dart'
    as _i12;
import 'package:film_freund/services/movies/i_movie_database.dart' as _i10;
import 'package:film_freund/services/movies/models/movie.dart' as _i11;
import 'package:film_freund/services/movies/models/movie_teaser.dart' as _i7;
import 'package:film_freund/services/user/i_user_database.dart' as _i9;
import 'package:film_freund/services/user/models/user.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeUser_0 extends _i1.Fake implements _i2.User {}

class _FakeDateTime_1 extends _i1.Fake implements DateTime {}

/// A class which mocks [UserManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserManager extends _i1.Mock implements _i3.UserManager {
  MockUserManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAuthenticated => (super
          .noSuchMethod(Invocation.getter(#isAuthenticated), returnValue: false)
      as bool);
  @override
  _i4.Future<_i2.User> get currentUser =>
      (super.noSuchMethod(Invocation.getter(#currentUser),
              returnValue: Future<_i2.User>.value(_FakeUser_0()))
          as _i4.Future<_i2.User>);
  @override
  void setUp() => super.noSuchMethod(Invocation.method(#setUp, []),
      returnValueForMissingStub: null);
  @override
  _i4.Future<_i2.User?> getUser({String? id}) =>
      (super.noSuchMethod(Invocation.method(#getUser, [], {#id: id}),
          returnValue: Future<_i2.User?>.value()) as _i4.Future<_i2.User?>);
  @override
  _i4.Future<_i5.AuthResult> signin({String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#signin, [], {#email: email, #password: password}),
          returnValue:
              Future<_i5.AuthResult>.value(_i5.AuthResult.createSuccess)) as _i4
          .Future<_i5.AuthResult>);
  @override
  _i4.Future<void> signout() =>
      (super.noSuchMethod(Invocation.method(#signout, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(Invocation.method(#updateDisplayName, [displayName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i5.ChangePasswordResult> changePassword(
          {String? currentPassword, String? newPassword}) =>
      (super.noSuchMethod(
              Invocation.method(#changePassword, [], {
                #currentPassword: currentPassword,
                #newPassword: newPassword
              }),
              returnValue: Future<_i5.ChangePasswordResult>.value(
                  _i5.ChangePasswordResult.success))
          as _i4.Future<_i5.ChangePasswordResult>);
  @override
  _i4.Future<_i5.DeleteResult> deleteUser({String? password}) => (super
      .noSuchMethod(Invocation.method(#deleteUser, [], {#password: password}),
          returnValue:
              Future<_i5.DeleteResult>.value(_i5.DeleteResult.success)) as _i4
      .Future<_i5.DeleteResult>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieManager extends _i1.Mock implements _i6.MovieManager {
  MockMovieManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.MovieTeaser>> getPopular() => (super.noSuchMethod(
          Invocation.method(#getPopular, []),
          returnValue: Future<List<_i7.MovieTeaser>>.value(<_i7.MovieTeaser>[]))
      as _i4.Future<List<_i7.MovieTeaser>>);
  @override
  _i4.Future<List<_i7.MovieTeaser>> getUpcoming() => (super.noSuchMethod(
          Invocation.method(#getUpcoming, []),
          returnValue: Future<List<_i7.MovieTeaser>>.value(<_i7.MovieTeaser>[]))
      as _i4.Future<List<_i7.MovieTeaser>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DateTimeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDateTimeService extends _i1.Mock implements _i8.DateTimeService {
  MockDateTimeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  DateTime get nowUtc => (super.noSuchMethod(Invocation.getter(#nowUtc),
      returnValue: _FakeDateTime_1()) as DateTime);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthService extends _i1.Mock implements _i5.IAuthService {
  MockIAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isUserAuthenticated =>
      (super.noSuchMethod(Invocation.getter(#isUserAuthenticated),
          returnValue: false) as bool);
  @override
  _i4.Stream<bool> watchIsUserAuthenticated() =>
      (super.noSuchMethod(Invocation.method(#watchIsUserAuthenticated, []),
          returnValue: Stream<bool>.empty()) as _i4.Stream<bool>);
  @override
  _i4.Future<_i5.AuthResult> signin({String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#signin, [], {#email: email, #password: password}),
          returnValue:
              Future<_i5.AuthResult>.value(_i5.AuthResult.createSuccess)) as _i4
          .Future<_i5.AuthResult>);
  @override
  _i4.Future<void> signout() =>
      (super.noSuchMethod(Invocation.method(#signout, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i5.ChangePasswordResult> changePassword(
          {String? currentPassword, String? newPassword}) =>
      (super.noSuchMethod(
              Invocation.method(#changePassword, [], {
                #currentPassword: currentPassword,
                #newPassword: newPassword
              }),
              returnValue: Future<_i5.ChangePasswordResult>.value(
                  _i5.ChangePasswordResult.success))
          as _i4.Future<_i5.ChangePasswordResult>);
  @override
  _i4.Future<_i5.DeleteResult> delete({String? password}) =>
      (super.noSuchMethod(Invocation.method(#delete, [], {#password: password}),
              returnValue:
                  Future<_i5.DeleteResult>.value(_i5.DeleteResult.success))
          as _i4.Future<_i5.DeleteResult>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IUserDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserDatabase extends _i1.Mock implements _i9.IUserDatabase {
  MockIUserDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.User> createUser(
          {String? id, String? email, String? displayName}) =>
      (super.noSuchMethod(
              Invocation.method(#createUser, [],
                  {#id: id, #email: email, #displayName: displayName}),
              returnValue: Future<_i2.User>.value(_FakeUser_0()))
          as _i4.Future<_i2.User>);
  @override
  _i4.Future<_i2.User?> getUser({String? id}) =>
      (super.noSuchMethod(Invocation.method(#getUser, [], {#id: id}),
          returnValue: Future<_i2.User?>.value()) as _i4.Future<_i2.User?>);
  @override
  _i4.Stream<_i2.User?> watchUser({String? id}) =>
      (super.noSuchMethod(Invocation.method(#watchUser, [], {#id: id}),
          returnValue: Stream<_i2.User?>.empty()) as _i4.Stream<_i2.User?>);
  @override
  _i4.Future<void> updateUser(
          {_i2.User? user,
          String? displayName,
          List<String>? watched,
          List<String>? watchlist,
          List<String>? lists}) =>
      (super.noSuchMethod(
          Invocation.method(#updateUser, [], {
            #user: user,
            #displayName: displayName,
            #watched: watched,
            #watchlist: watchlist,
            #lists: lists
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteUser({String? id}) =>
      (super.noSuchMethod(Invocation.method(#deleteUser, [], {#id: id}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [IMovieDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIMovieDatabase extends _i1.Mock implements _i10.IMovieDatabase {
  MockIMovieDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i11.Movie?> getMovie(String? id) =>
      (super.noSuchMethod(Invocation.method(#getMovie, [id]),
          returnValue: Future<_i11.Movie?>.value()) as _i4.Future<_i11.Movie?>);
  @override
  _i4.Future<List<_i7.MovieTeaser>> getPopular() => (super.noSuchMethod(
          Invocation.method(#getPopular, []),
          returnValue: Future<List<_i7.MovieTeaser>>.value(<_i7.MovieTeaser>[]))
      as _i4.Future<List<_i7.MovieTeaser>>);
  @override
  _i4.Future<List<_i7.MovieTeaser>> getUpcoming() => (super.noSuchMethod(
          Invocation.method(#getUpcoming, []),
          returnValue: Future<List<_i7.MovieTeaser>>.value(<_i7.MovieTeaser>[]))
      as _i4.Future<List<_i7.MovieTeaser>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ILocalSettingsDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocalSettingsDatabase extends _i1.Mock
    implements _i12.ILocalSettingsDatabase {
  MockILocalSettingsDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get region =>
      (super.noSuchMethod(Invocation.getter(#region), returnValue: '')
          as String);
  @override
  set region(String? value) =>
      super.noSuchMethod(Invocation.setter(#region, value),
          returnValueForMissingStub: null);
  @override
  String get displayName =>
      (super.noSuchMethod(Invocation.getter(#displayName), returnValue: '')
          as String);
  @override
  set displayName(String? value) =>
      super.noSuchMethod(Invocation.setter(#displayName, value),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(Invocation.method(#initialize, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> reset() => (super.noSuchMethod(Invocation.method(#reset, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}
