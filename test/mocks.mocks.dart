// Mocks generated by Mockito 5.3.2 from annotations
// in film_freund/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:typed_data' as _i23;

import 'package:film_freund/managers/cache/cache_manager.dart' as _i10;
import 'package:film_freund/managers/movies/movie_manager.dart' as _i8;
import 'package:film_freund/managers/user/user_manager.dart' as _i5;
import 'package:film_freund/services/auth/i_auth_service.dart' as _i7;
import 'package:film_freund/services/date_time/date_time_service.dart' as _i11;
import 'package:film_freund/services/lists/enums/list_type.dart' as _i17;
import 'package:film_freund/services/lists/i_list_database.dart' as _i16;
import 'package:film_freund/services/lists/models/movie_list.dart' as _i3;
import 'package:film_freund/services/local_settings/i_local_settings_database.dart'
    as _i18;
import 'package:film_freund/services/local_settings/region.dart' as _i19;
import 'package:film_freund/services/movies/i_movie_database.dart' as _i14;
import 'package:film_freund/services/movies/models/movie.dart' as _i15;
import 'package:film_freund/services/movies/models/movie_teaser.dart' as _i9;
import 'package:film_freund/services/platform/i_platform_service.dart' as _i20;
import 'package:film_freund/services/user/i_user_database.dart' as _i13;
import 'package:film_freund/services/user/models/user.dart' as _i2;
import 'package:film_freund/services/uuid/uuid_service.dart' as _i12;
import 'package:hive/hive.dart' as _i4;
import 'package:hive/src/box/default_compaction_strategy.dart' as _i22;
import 'package:hive/src/box/default_key_comparator.dart' as _i21;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieList_1 extends _i1.SmartFake implements _i3.MovieList {
  _FakeMovieList_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_2 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBox_3<E> extends _i1.SmartFake implements _i4.Box<E> {
  _FakeBox_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLazyBox_4<E> extends _i1.SmartFake implements _i4.LazyBox<E> {
  _FakeLazyBox_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserManager extends _i1.Mock implements _i5.UserManager {
  MockUserManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);
  @override
  _i6.Future<_i2.User> get currentUser => (super.noSuchMethod(
        Invocation.getter(#currentUser),
        returnValue: _i6.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.getter(#currentUser),
        )),
      ) as _i6.Future<_i2.User>);
  @override
  _i6.Stream<_i2.User?> get watchCurrentUser => (super.noSuchMethod(
        Invocation.getter(#watchCurrentUser),
        returnValue: _i6.Stream<_i2.User?>.empty(),
      ) as _i6.Stream<_i2.User?>);
  @override
  _i6.Future<_i2.User?> getUser({required String? id}) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
          {#id: id},
        ),
        returnValue: _i6.Future<_i2.User?>.value(),
      ) as _i6.Future<_i2.User?>);
  @override
  _i6.Future<_i7.AuthResult> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i6.Future<_i7.AuthResult>.value(_i7.AuthResult.createSuccess),
      ) as _i6.Future<_i7.AuthResult>);
  @override
  _i6.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> updateDisplayName(String? displayName) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDisplayName,
          [displayName],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<_i7.ChangePasswordResult> changePassword({
    required String? currentPassword,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [],
          {
            #currentPassword: currentPassword,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i6.Future<_i7.ChangePasswordResult>.value(
            _i7.ChangePasswordResult.success),
      ) as _i6.Future<_i7.ChangePasswordResult>);
  @override
  _i6.Future<_i7.DeleteResult> deleteUser({required String? password}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
          {#password: password},
        ),
        returnValue:
            _i6.Future<_i7.DeleteResult>.value(_i7.DeleteResult.success),
      ) as _i6.Future<_i7.DeleteResult>);
}

/// A class which mocks [MovieManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieManager extends _i1.Mock implements _i8.MovieManager {
  MockMovieManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<List<_i9.MovieTeaser>> get watchedMovies => (super.noSuchMethod(
        Invocation.getter(#watchedMovies),
        returnValue: _i6.Stream<List<_i9.MovieTeaser>>.empty(),
      ) as _i6.Stream<List<_i9.MovieTeaser>>);
  @override
  _i6.Stream<List<_i9.MovieTeaser>> get watchlistMovies => (super.noSuchMethod(
        Invocation.getter(#watchlistMovies),
        returnValue: _i6.Stream<List<_i9.MovieTeaser>>.empty(),
      ) as _i6.Stream<List<_i9.MovieTeaser>>);
  @override
  _i6.Stream<_i3.MovieList> get watchWatched => (super.noSuchMethod(
        Invocation.getter(#watchWatched),
        returnValue: _i6.Stream<_i3.MovieList>.empty(),
      ) as _i6.Stream<_i3.MovieList>);
  @override
  _i6.Stream<_i3.MovieList> get watchWatchlist => (super.noSuchMethod(
        Invocation.getter(#watchWatchlist),
        returnValue: _i6.Stream<_i3.MovieList>.empty(),
      ) as _i6.Stream<_i3.MovieList>);
  @override
  _i6.Future<List<_i9.MovieTeaser>> getPopular() => (super.noSuchMethod(
        Invocation.method(
          #getPopular,
          [],
        ),
        returnValue:
            _i6.Future<List<_i9.MovieTeaser>>.value(<_i9.MovieTeaser>[]),
      ) as _i6.Future<List<_i9.MovieTeaser>>);
  @override
  _i6.Future<List<_i9.MovieTeaser>> getUpcoming() => (super.noSuchMethod(
        Invocation.method(
          #getUpcoming,
          [],
        ),
        returnValue:
            _i6.Future<List<_i9.MovieTeaser>>.value(<_i9.MovieTeaser>[]),
      ) as _i6.Future<List<_i9.MovieTeaser>>);
  @override
  _i6.Future<List<_i9.MovieTeaser>> searchMovies(String? searchTerm) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [searchTerm],
        ),
        returnValue:
            _i6.Future<List<_i9.MovieTeaser>>.value(<_i9.MovieTeaser>[]),
      ) as _i6.Future<List<_i9.MovieTeaser>>);
  @override
  _i3.MovieList returnListOrThrow(_i3.MovieList? list) => (super.noSuchMethod(
        Invocation.method(
          #returnListOrThrow,
          [list],
        ),
        returnValue: _FakeMovieList_1(
          this,
          Invocation.method(
            #returnListOrThrow,
            [list],
          ),
        ),
      ) as _i3.MovieList);
  @override
  _i6.Future<void> addWatchedMovie(int? movieId) => (super.noSuchMethod(
        Invocation.method(
          #addWatchedMovie,
          [movieId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> removeWatchedMovie(int? movieId) => (super.noSuchMethod(
        Invocation.method(
          #removeWatchedMovie,
          [movieId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> addWatchlistMovie(int? movieId) => (super.noSuchMethod(
        Invocation.method(
          #addWatchlistMovie,
          [movieId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> removeWatchlistMovie(int? movieId) => (super.noSuchMethod(
        Invocation.method(
          #removeWatchlistMovie,
          [movieId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [CacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheManager extends _i1.Mock implements _i10.CacheManager {
  MockCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onAuthStateChangedSubscription(
          _i6.StreamSubscription<bool>? _onAuthStateChangedSubscription) =>
      super.noSuchMethod(
        Invocation.setter(
          #onAuthStateChangedSubscription,
          _onAuthStateChangedSubscription,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get watchedId => (super.noSuchMethod(
        Invocation.getter(#watchedId),
        returnValue: '',
      ) as String);
  @override
  String get watchlistId => (super.noSuchMethod(
        Invocation.getter(#watchlistId),
        returnValue: '',
      ) as String);
  @override
  void start() => super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> onAuthStateChanged(bool? isUserAuthenticated) =>
      (super.noSuchMethod(
        Invocation.method(
          #onAuthStateChanged,
          [isUserAuthenticated],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void stop() => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DateTimeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDateTimeService extends _i1.Mock implements _i11.DateTimeService {
  MockDateTimeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  DateTime get nowUtc => (super.noSuchMethod(
        Invocation.getter(#nowUtc),
        returnValue: _FakeDateTime_2(
          this,
          Invocation.getter(#nowUtc),
        ),
      ) as DateTime);
}

/// A class which mocks [UUIDService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUUIDService extends _i1.Mock implements _i12.UUIDService {
  MockUUIDService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String generate() => (super.noSuchMethod(
        Invocation.method(
          #generate,
          [],
        ),
        returnValue: '',
      ) as String);
}

/// A class which mocks [IAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthService extends _i1.Mock implements _i7.IAuthService {
  MockIAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isUserAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isUserAuthenticated),
        returnValue: false,
      ) as bool);
  @override
  _i6.Stream<bool> get onAuthStateChanged => (super.noSuchMethod(
        Invocation.getter(#onAuthStateChanged),
        returnValue: _i6.Stream<bool>.empty(),
      ) as _i6.Stream<bool>);
  @override
  _i6.Future<_i7.AuthResult> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i6.Future<_i7.AuthResult>.value(_i7.AuthResult.createSuccess),
      ) as _i6.Future<_i7.AuthResult>);
  @override
  _i6.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<_i7.ChangePasswordResult> changePassword({
    required String? currentPassword,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePassword,
          [],
          {
            #currentPassword: currentPassword,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i6.Future<_i7.ChangePasswordResult>.value(
            _i7.ChangePasswordResult.success),
      ) as _i6.Future<_i7.ChangePasswordResult>);
  @override
  _i6.Future<_i7.DeleteResult> delete({required String? password}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#password: password},
        ),
        returnValue:
            _i6.Future<_i7.DeleteResult>.value(_i7.DeleteResult.success),
      ) as _i6.Future<_i7.DeleteResult>);
}

/// A class which mocks [IUserDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserDatabase extends _i1.Mock implements _i13.IUserDatabase {
  MockIUserDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> createUser({
    required String? id,
    required String? email,
    String? displayName,
    required String? watchedId,
    required String? watchlistId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [],
          {
            #id: id,
            #email: email,
            #displayName: displayName,
            #watchedId: watchedId,
            #watchlistId: watchlistId,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<_i2.User?> getUser({required String? id}) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
          {#id: id},
        ),
        returnValue: _i6.Future<_i2.User?>.value(),
      ) as _i6.Future<_i2.User?>);
  @override
  _i6.Stream<_i2.User?> watchUser({required String? id}) => (super.noSuchMethod(
        Invocation.method(
          #watchUser,
          [],
          {#id: id},
        ),
        returnValue: _i6.Stream<_i2.User?>.empty(),
      ) as _i6.Stream<_i2.User?>);
  @override
  _i6.Future<void> updateUser({
    required _i2.User? user,
    String? displayName,
    List<String>? lists,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [],
          {
            #user: user,
            #displayName: displayName,
            #lists: lists,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteUser({required String? id}) => (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
          {#id: id},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [IMovieDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIMovieDatabase extends _i1.Mock implements _i14.IMovieDatabase {
  MockIMovieDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i15.Movie?> getMovie(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getMovie,
          [id],
        ),
        returnValue: _i6.Future<_i15.Movie?>.value(),
      ) as _i6.Future<_i15.Movie?>);
  @override
  _i6.Future<List<_i15.Movie>> getMovies(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #getMovies,
          [ids],
        ),
        returnValue: _i6.Future<List<_i15.Movie>>.value(<_i15.Movie>[]),
      ) as _i6.Future<List<_i15.Movie>>);
  @override
  _i6.Future<List<_i9.MovieTeaser>> getPopular({required String? region}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopular,
          [],
          {#region: region},
        ),
        returnValue:
            _i6.Future<List<_i9.MovieTeaser>>.value(<_i9.MovieTeaser>[]),
      ) as _i6.Future<List<_i9.MovieTeaser>>);
  @override
  _i6.Future<List<_i9.MovieTeaser>> getUpcoming({required String? region}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUpcoming,
          [],
          {#region: region},
        ),
        returnValue:
            _i6.Future<List<_i9.MovieTeaser>>.value(<_i9.MovieTeaser>[]),
      ) as _i6.Future<List<_i9.MovieTeaser>>);
  @override
  _i6.Future<List<_i9.MovieTeaser>> searchMovies({
    required String? searchTerm,
    required String? region,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [],
          {
            #searchTerm: searchTerm,
            #region: region,
          },
        ),
        returnValue:
            _i6.Future<List<_i9.MovieTeaser>>.value(<_i9.MovieTeaser>[]),
      ) as _i6.Future<List<_i9.MovieTeaser>>);
}

/// A class which mocks [IListDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIListDatabase extends _i1.Mock implements _i16.IListDatabase {
  MockIListDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<String> createList({
    required _i17.ListType? type,
    String? title,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createList,
          [],
          {
            #type: type,
            #title: title,
          },
        ),
        returnValue: _i6.Future<String>.value(''),
      ) as _i6.Future<String>);
  @override
  _i6.Future<_i3.MovieList?> getList({required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getList,
          [],
          {#id: id},
        ),
        returnValue: _i6.Future<_i3.MovieList?>.value(),
      ) as _i6.Future<_i3.MovieList?>);
  @override
  _i6.Stream<_i3.MovieList?> watchList({required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchList,
          [],
          {#id: id},
        ),
        returnValue: _i6.Stream<_i3.MovieList?>.empty(),
      ) as _i6.Stream<_i3.MovieList?>);
  @override
  _i6.Future<void> deleteList({required String? id}) => (super.noSuchMethod(
        Invocation.method(
          #deleteList,
          [],
          {#id: id},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> addMovieToList({
    required String? listId,
    required int? movieId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMovieToList,
          [],
          {
            #listId: listId,
            #movieId: movieId,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> removeMovieFromList({
    required String? listId,
    required int? movieId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMovieFromList,
          [],
          {
            #listId: listId,
            #movieId: movieId,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [ILocalSettingsDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockILocalSettingsDatabase extends _i1.Mock
    implements _i18.ILocalSettingsDatabase {
  MockILocalSettingsDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.Region get region => (super.noSuchMethod(
        Invocation.getter(#region),
        returnValue: _i19.Region.de,
      ) as _i19.Region);
  @override
  set region(_i19.Region? value) => super.noSuchMethod(
        Invocation.setter(
          #region,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> reset() => (super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [IPlatformService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPlatformService extends _i1.Mock implements _i20.IPlatformService {
  MockIPlatformService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isRunningOnWeb => (super.noSuchMethod(
        Invocation.getter(#isRunningOnWeb),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [HiveInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveInterface extends _i1.Mock implements _i4.HiveInterface {
  MockHiveInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void init(
    String? path, {
    _i4.HiveStorageBackendPreference? backendPreference =
        _i4.HiveStorageBackendPreference.native,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #init,
          [path],
          {#backendPreference: backendPreference},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<_i4.Box<E>> openBox<E>(
    String? name, {
    _i4.HiveCipher? encryptionCipher,
    _i4.KeyComparator? keyComparator = _i21.defaultKeyComparator,
    _i4.CompactionStrategy? compactionStrategy = _i22.defaultCompactionStrategy,
    bool? crashRecovery = true,
    String? path,
    _i23.Uint8List? bytes,
    String? collection,
    List<int>? encryptionKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openBox,
          [name],
          {
            #encryptionCipher: encryptionCipher,
            #keyComparator: keyComparator,
            #compactionStrategy: compactionStrategy,
            #crashRecovery: crashRecovery,
            #path: path,
            #bytes: bytes,
            #collection: collection,
            #encryptionKey: encryptionKey,
          },
        ),
        returnValue: _i6.Future<_i4.Box<E>>.value(_FakeBox_3<E>(
          this,
          Invocation.method(
            #openBox,
            [name],
            {
              #encryptionCipher: encryptionCipher,
              #keyComparator: keyComparator,
              #compactionStrategy: compactionStrategy,
              #crashRecovery: crashRecovery,
              #path: path,
              #bytes: bytes,
              #collection: collection,
              #encryptionKey: encryptionKey,
            },
          ),
        )),
      ) as _i6.Future<_i4.Box<E>>);
  @override
  _i6.Future<_i4.LazyBox<E>> openLazyBox<E>(
    String? name, {
    _i4.HiveCipher? encryptionCipher,
    _i4.KeyComparator? keyComparator = _i21.defaultKeyComparator,
    _i4.CompactionStrategy? compactionStrategy = _i22.defaultCompactionStrategy,
    bool? crashRecovery = true,
    String? path,
    String? collection,
    List<int>? encryptionKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openLazyBox,
          [name],
          {
            #encryptionCipher: encryptionCipher,
            #keyComparator: keyComparator,
            #compactionStrategy: compactionStrategy,
            #crashRecovery: crashRecovery,
            #path: path,
            #collection: collection,
            #encryptionKey: encryptionKey,
          },
        ),
        returnValue: _i6.Future<_i4.LazyBox<E>>.value(_FakeLazyBox_4<E>(
          this,
          Invocation.method(
            #openLazyBox,
            [name],
            {
              #encryptionCipher: encryptionCipher,
              #keyComparator: keyComparator,
              #compactionStrategy: compactionStrategy,
              #crashRecovery: crashRecovery,
              #path: path,
              #collection: collection,
              #encryptionKey: encryptionKey,
            },
          ),
        )),
      ) as _i6.Future<_i4.LazyBox<E>>);
  @override
  _i4.Box<E> box<E>(String? name) => (super.noSuchMethod(
        Invocation.method(
          #box,
          [name],
        ),
        returnValue: _FakeBox_3<E>(
          this,
          Invocation.method(
            #box,
            [name],
          ),
        ),
      ) as _i4.Box<E>);
  @override
  _i4.LazyBox<E> lazyBox<E>(String? name) => (super.noSuchMethod(
        Invocation.method(
          #lazyBox,
          [name],
        ),
        returnValue: _FakeLazyBox_4<E>(
          this,
          Invocation.method(
            #lazyBox,
            [name],
          ),
        ),
      ) as _i4.LazyBox<E>);
  @override
  bool isBoxOpen(String? name) => (super.noSuchMethod(
        Invocation.method(
          #isBoxOpen,
          [name],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteBoxFromDisk(
    String? name, {
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBoxFromDisk,
          [name],
          {#path: path},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  List<int> generateSecureKey() => (super.noSuchMethod(
        Invocation.method(
          #generateSecureKey,
          [],
        ),
        returnValue: <int>[],
      ) as List<int>);
  @override
  _i6.Future<bool> boxExists(
    String? name, {
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #boxExists,
          [name],
          {#path: path},
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
  @override
  void resetAdapters() => super.noSuchMethod(
        Invocation.method(
          #resetAdapters,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerAdapter<T>(
    _i4.TypeAdapter<T>? adapter, {
    bool? internal = false,
    bool? override = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerAdapter,
          [adapter],
          {
            #internal: internal,
            #override: override,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isAdapterRegistered(int? typeId) => (super.noSuchMethod(
        Invocation.method(
          #isAdapterRegistered,
          [typeId],
        ),
        returnValue: false,
      ) as bool);
  @override
  void ignoreTypeId<T>(int? typeId) => super.noSuchMethod(
        Invocation.method(
          #ignoreTypeId,
          [typeId],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i4.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <E>[],
      ) as Iterable<E>);
  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: '',
      ) as String);
  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);
  @override
  bool get lazy => (super.noSuchMethod(
        Invocation.getter(#lazy),
        returnValue: false,
      ) as bool);
  @override
  Iterable<dynamic> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);
  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);
  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);
  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);
  @override
  Iterable<E> valuesBetween({
    dynamic startKey,
    dynamic endKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #valuesBetween,
          [],
          {
            #startKey: startKey,
            #endKey: endKey,
          },
        ),
        returnValue: <E>[],
      ) as Iterable<E>);
  @override
  E? getAt(int? index) => (super.noSuchMethod(Invocation.method(
        #getAt,
        [index],
      )) as E?);
  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <dynamic, E>{},
      ) as Map<dynamic, E>);
  @override
  dynamic keyAt(int? index) => super.noSuchMethod(Invocation.method(
        #keyAt,
        [index],
      ));
  @override
  _i6.Stream<_i4.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#key: key},
        ),
        returnValue: _i6.Stream<_i4.BoxEvent>.empty(),
      ) as _i6.Stream<_i4.BoxEvent>);
  @override
  bool containsKey(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i6.Future<void> put(
    dynamic key,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> putAt(
    int? index,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAt,
          [
            index,
            value,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [entries],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<int> add(E? value) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);
  @override
  _i6.Future<Iterable<int>> addAll(Iterable<E>? values) => (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [values],
        ),
        returnValue: _i6.Future<Iterable<int>>.value(<int>[]),
      ) as _i6.Future<Iterable<int>>);
  @override
  _i6.Future<void> delete(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteAt,
          [index],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [keys],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> compact() => (super.noSuchMethod(
        Invocation.method(
          #compact,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<int> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Future<void> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
